// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: process.proto

package types

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProcessStartRequest struct {
	Checksum string   `protobuf:"bytes,1,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	Path     string   `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	Args     []string `protobuf:"bytes,3,rep,name=Args,proto3" json:"Args,omitempty"`
	Exposes  []*Port  `protobuf:"bytes,4,rep,name=Exposes,proto3" json:"Exposes,omitempty"`
	Envs     []string `protobuf:"bytes,5,rep,name=Envs,proto3" json:"Envs,omitempty"`
	Dir      string   `protobuf:"bytes,6,opt,name=Dir,proto3" json:"Dir,omitempty"`
}

func (m *ProcessStartRequest) Reset()         { *m = ProcessStartRequest{} }
func (m *ProcessStartRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessStartRequest) ProtoMessage()    {}
func (*ProcessStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0}
}
func (m *ProcessStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessStartRequest.Merge(m, src)
}
func (m *ProcessStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessStartRequest proto.InternalMessageInfo

func (m *ProcessStartRequest) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *ProcessStartRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ProcessStartRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ProcessStartRequest) GetExposes() []*Port {
	if m != nil {
		return m.Exposes
	}
	return nil
}

func (m *ProcessStartRequest) GetEnvs() []string {
	if m != nil {
		return m.Envs
	}
	return nil
}

func (m *ProcessStartRequest) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

type ProcessStartResponse struct {
	Data *ProcessName `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ProcessStartResponse) Reset()         { *m = ProcessStartResponse{} }
func (m *ProcessStartResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessStartResponse) ProtoMessage()    {}
func (*ProcessStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{1}
}
func (m *ProcessStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessStartResponse.Merge(m, src)
}
func (m *ProcessStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProcessStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessStartResponse proto.InternalMessageInfo

func (m *ProcessStartResponse) GetData() *ProcessName {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProcessWaitRequest struct {
	Data *ProcessName `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ProcessWaitRequest) Reset()         { *m = ProcessWaitRequest{} }
func (m *ProcessWaitRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessWaitRequest) ProtoMessage()    {}
func (*ProcessWaitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{2}
}
func (m *ProcessWaitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessWaitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessWaitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessWaitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessWaitRequest.Merge(m, src)
}
func (m *ProcessWaitRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessWaitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessWaitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessWaitRequest proto.InternalMessageInfo

func (m *ProcessWaitRequest) GetData() *ProcessName {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProcessWaitResponse struct {
	// Types that are valid to be assigned to Options:
	//	*ProcessWaitResponse_StdOut
	//	*ProcessWaitResponse_StdErr
	Options isProcessWaitResponse_Options `protobuf_oneof:"Options"`
}

func (m *ProcessWaitResponse) Reset()         { *m = ProcessWaitResponse{} }
func (m *ProcessWaitResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessWaitResponse) ProtoMessage()    {}
func (*ProcessWaitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{3}
}
func (m *ProcessWaitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessWaitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessWaitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessWaitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessWaitResponse.Merge(m, src)
}
func (m *ProcessWaitResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProcessWaitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessWaitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessWaitResponse proto.InternalMessageInfo

type isProcessWaitResponse_Options interface {
	isProcessWaitResponse_Options()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProcessWaitResponse_StdOut struct {
	StdOut []byte `protobuf:"bytes,1,opt,name=StdOut,proto3,oneof" json:"StdOut,omitempty"`
}
type ProcessWaitResponse_StdErr struct {
	StdErr []byte `protobuf:"bytes,2,opt,name=StdErr,proto3,oneof" json:"StdErr,omitempty"`
}

func (*ProcessWaitResponse_StdOut) isProcessWaitResponse_Options() {}
func (*ProcessWaitResponse_StdErr) isProcessWaitResponse_Options() {}

func (m *ProcessWaitResponse) GetOptions() isProcessWaitResponse_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ProcessWaitResponse) GetStdOut() []byte {
	if x, ok := m.GetOptions().(*ProcessWaitResponse_StdOut); ok {
		return x.StdOut
	}
	return nil
}

func (m *ProcessWaitResponse) GetStdErr() []byte {
	if x, ok := m.GetOptions().(*ProcessWaitResponse_StdErr); ok {
		return x.StdErr
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProcessWaitResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProcessWaitResponse_StdOut)(nil),
		(*ProcessWaitResponse_StdErr)(nil),
	}
}

type ProcessKeepAliveRequest struct {
	Data *ProcessName `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ProcessKeepAliveRequest) Reset()         { *m = ProcessKeepAliveRequest{} }
func (m *ProcessKeepAliveRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessKeepAliveRequest) ProtoMessage()    {}
func (*ProcessKeepAliveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{4}
}
func (m *ProcessKeepAliveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessKeepAliveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessKeepAliveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessKeepAliveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessKeepAliveRequest.Merge(m, src)
}
func (m *ProcessKeepAliveRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessKeepAliveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessKeepAliveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessKeepAliveRequest proto.InternalMessageInfo

func (m *ProcessKeepAliveRequest) GetData() *ProcessName {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProcessName struct {
	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *ProcessName) Reset()         { *m = ProcessName{} }
func (m *ProcessName) String() string { return proto.CompactTextString(m) }
func (*ProcessName) ProtoMessage()    {}
func (*ProcessName) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{5}
}
func (m *ProcessName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessName.Merge(m, src)
}
func (m *ProcessName) XXX_Size() int {
	return m.Size()
}
func (m *ProcessName) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessName.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessName proto.InternalMessageInfo

func (m *ProcessName) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcessStartRequest)(nil), "wins.ProcessStartRequest")
	proto.RegisterType((*ProcessStartResponse)(nil), "wins.ProcessStartResponse")
	proto.RegisterType((*ProcessWaitRequest)(nil), "wins.ProcessWaitRequest")
	proto.RegisterType((*ProcessWaitResponse)(nil), "wins.ProcessWaitResponse")
	proto.RegisterType((*ProcessKeepAliveRequest)(nil), "wins.ProcessKeepAliveRequest")
	proto.RegisterType((*ProcessName)(nil), "wins.ProcessName")
}

func init() { proto.RegisterFile("process.proto", fileDescriptor_54c4d0e8c0aaf5c3) }

var fileDescriptor_54c4d0e8c0aaf5c3 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0xcd, 0x98, 0x64, 0xeb, 0xde, 0xad, 0xa2, 0x63, 0xc1, 0x69, 0xc0, 0xb8, 0x44, 0x85, 0x7d,
	0x5a, 0x64, 0x7d, 0x53, 0xc4, 0xb6, 0x36, 0x20, 0x08, 0x76, 0x49, 0xa5, 0x82, 0x6f, 0x31, 0x1d,
	0x6c, 0xb0, 0xc9, 0x8c, 0x33, 0x93, 0x55, 0xff, 0x85, 0x7f, 0xc2, 0xff, 0xe2, 0x9b, 0xfb, 0xe8,
	0xa3, 0xec, 0xfe, 0x11, 0x99, 0x8f, 0x84, 0x8d, 0xec, 0x83, 0x7d, 0x3b, 0x73, 0xce, 0x3d, 0x73,
	0xef, 0x3d, 0x33, 0x70, 0x83, 0x0b, 0x56, 0x50, 0x29, 0xa7, 0x5c, 0x30, 0xc5, 0x70, 0xf0, 0xa5,
	0xac, 0x65, 0xb4, 0x5b, 0xb0, 0xaa, 0x62, 0xb5, 0xe5, 0x22, 0xe0, 0x4c, 0x28, 0x8b, 0x93, 0x1f,
	0x08, 0xee, 0xcc, 0xad, 0xe3, 0x54, 0xe5, 0x42, 0x65, 0xf4, 0x73, 0x43, 0xa5, 0xc2, 0x11, 0x5c,
	0x7f, 0x79, 0x41, 0x8b, 0x4f, 0xb2, 0xa9, 0x08, 0x1a, 0xa3, 0xc9, 0x30, 0xeb, 0xce, 0x18, 0x43,
	0x30, 0xcf, 0xd5, 0x05, 0xb9, 0x66, 0x78, 0x83, 0x35, 0x77, 0x28, 0x3e, 0x4a, 0xe2, 0x8f, 0x7d,
	0xcd, 0x69, 0x8c, 0x1f, 0xc2, 0x4e, 0xfa, 0x95, 0x33, 0x49, 0x25, 0x09, 0xc6, 0xfe, 0x64, 0x34,
	0x83, 0xa9, 0x9e, 0x66, 0x3a, 0x67, 0x42, 0x65, 0xad, 0xa4, 0x9d, 0x69, 0xbd, 0x90, 0x24, 0xb4,
	0x4e, 0x8d, 0xf1, 0x2d, 0xf0, 0x8f, 0x4b, 0x41, 0x06, 0xa6, 0x81, 0x86, 0xc9, 0x73, 0xd8, 0xeb,
	0x8f, 0x29, 0x39, 0xab, 0x25, 0xc5, 0x8f, 0x20, 0x38, 0xce, 0x55, 0x6e, 0x66, 0x1c, 0xcd, 0x6e,
	0xbb, 0x06, 0xb6, 0xf2, 0x4d, 0x5e, 0xd1, 0xcc, 0xc8, 0xc9, 0x33, 0xc0, 0x8e, 0x7c, 0x97, 0x97,
	0xdd, 0x92, 0xff, 0x69, 0x7e, 0xdb, 0x45, 0x64, 0xcd, 0xae, 0x35, 0x81, 0xc1, 0xa9, 0x3a, 0x3f,
	0x69, 0x94, 0xf1, 0xef, 0xbe, 0xf2, 0x32, 0x77, 0x76, 0x4a, 0x2a, 0x84, 0x89, 0xa8, 0x55, 0x52,
	0x21, 0x8e, 0x86, 0xb0, 0x73, 0xc2, 0x55, 0xc9, 0x6a, 0x99, 0x1c, 0xc0, 0x5d, 0x77, 0xeb, 0x6b,
	0x4a, 0xf9, 0xe1, 0x65, 0xb9, 0xa0, 0x57, 0x9c, 0xeb, 0x01, 0x8c, 0x36, 0x48, 0xbc, 0x07, 0xe1,
	0x59, 0x7e, 0xd9, 0x50, 0xf7, 0x5e, 0xf6, 0x30, 0xfb, 0x85, 0xe0, 0x66, 0x9b, 0x1c, 0x15, 0x8b,
	0xb2, 0xa0, 0xf8, 0x00, 0x42, 0x13, 0x22, 0xde, 0xef, 0xdd, 0xbc, 0xf9, 0xfe, 0x51, 0xb4, 0x4d,
	0xb2, 0x8b, 0x27, 0x1e, 0x7e, 0x01, 0x81, 0x8e, 0x02, 0x93, 0x5e, 0xd5, 0x46, 0xb4, 0xd1, 0xfe,
	0x16, 0xa5, 0xb5, 0x3f, 0x46, 0xf8, 0x29, 0x0c, 0xbb, 0xad, 0xf1, 0xbd, 0x5e, 0xed, 0xbf, 0x69,
	0x44, 0xee, 0xd7, 0x9c, 0xb1, 0xf2, 0x3c, 0xf1, 0x26, 0xe8, 0xe8, 0xfe, 0xcf, 0x55, 0x8c, 0x96,
	0xab, 0x18, 0xfd, 0x59, 0xc5, 0xe8, 0xfb, 0x3a, 0xf6, 0x96, 0xeb, 0xd8, 0xfb, 0xbd, 0x8e, 0xbd,
	0xf7, 0xa1, 0xfa, 0xc6, 0xa9, 0xfc, 0x30, 0x30, 0x5f, 0xfb, 0xc9, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x54, 0x50, 0x81, 0xd6, 0x0b, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProcessServiceClient is the client API for ProcessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessServiceClient interface {
	Start(ctx context.Context, in *ProcessStartRequest, opts ...grpc.CallOption) (*ProcessStartResponse, error)
	Wait(ctx context.Context, in *ProcessWaitRequest, opts ...grpc.CallOption) (ProcessService_WaitClient, error)
	KeepAlive(ctx context.Context, opts ...grpc.CallOption) (ProcessService_KeepAliveClient, error)
}

type processServiceClient struct {
	cc *grpc.ClientConn
}

func NewProcessServiceClient(cc *grpc.ClientConn) ProcessServiceClient {
	return &processServiceClient{cc}
}

func (c *processServiceClient) Start(ctx context.Context, in *ProcessStartRequest, opts ...grpc.CallOption) (*ProcessStartResponse, error) {
	out := new(ProcessStartResponse)
	err := c.cc.Invoke(ctx, "/wins.ProcessService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) Wait(ctx context.Context, in *ProcessWaitRequest, opts ...grpc.CallOption) (ProcessService_WaitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProcessService_serviceDesc.Streams[0], "/wins.ProcessService/Wait", opts...)
	if err != nil {
		return nil, err
	}
	x := &processServiceWaitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessService_WaitClient interface {
	Recv() (*ProcessWaitResponse, error)
	grpc.ClientStream
}

type processServiceWaitClient struct {
	grpc.ClientStream
}

func (x *processServiceWaitClient) Recv() (*ProcessWaitResponse, error) {
	m := new(ProcessWaitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processServiceClient) KeepAlive(ctx context.Context, opts ...grpc.CallOption) (ProcessService_KeepAliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProcessService_serviceDesc.Streams[1], "/wins.ProcessService/KeepAlive", opts...)
	if err != nil {
		return nil, err
	}
	x := &processServiceKeepAliveClient{stream}
	return x, nil
}

type ProcessService_KeepAliveClient interface {
	Send(*ProcessKeepAliveRequest) error
	CloseAndRecv() (*Void, error)
	grpc.ClientStream
}

type processServiceKeepAliveClient struct {
	grpc.ClientStream
}

func (x *processServiceKeepAliveClient) Send(m *ProcessKeepAliveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processServiceKeepAliveClient) CloseAndRecv() (*Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessServiceServer is the server API for ProcessService service.
type ProcessServiceServer interface {
	Start(context.Context, *ProcessStartRequest) (*ProcessStartResponse, error)
	Wait(*ProcessWaitRequest, ProcessService_WaitServer) error
	KeepAlive(ProcessService_KeepAliveServer) error
}

// UnimplementedProcessServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProcessServiceServer struct {
}

func (*UnimplementedProcessServiceServer) Start(ctx context.Context, req *ProcessStartRequest) (*ProcessStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedProcessServiceServer) Wait(req *ProcessWaitRequest, srv ProcessService_WaitServer) error {
	return status.Errorf(codes.Unimplemented, "method Wait not implemented")
}
func (*UnimplementedProcessServiceServer) KeepAlive(srv ProcessService_KeepAliveServer) error {
	return status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}

func RegisterProcessServiceServer(s *grpc.Server, srv ProcessServiceServer) {
	s.RegisterService(&_ProcessService_serviceDesc, srv)
}

func _ProcessService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wins.ProcessService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).Start(ctx, req.(*ProcessStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_Wait_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProcessWaitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServiceServer).Wait(m, &processServiceWaitServer{stream})
}

type ProcessService_WaitServer interface {
	Send(*ProcessWaitResponse) error
	grpc.ServerStream
}

type processServiceWaitServer struct {
	grpc.ServerStream
}

func (x *processServiceWaitServer) Send(m *ProcessWaitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProcessService_KeepAlive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessServiceServer).KeepAlive(&processServiceKeepAliveServer{stream})
}

type ProcessService_KeepAliveServer interface {
	SendAndClose(*Void) error
	Recv() (*ProcessKeepAliveRequest, error)
	grpc.ServerStream
}

type processServiceKeepAliveServer struct {
	grpc.ServerStream
}

func (x *processServiceKeepAliveServer) SendAndClose(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processServiceKeepAliveServer) Recv() (*ProcessKeepAliveRequest, error) {
	m := new(ProcessKeepAliveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProcessService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wins.ProcessService",
	HandlerType: (*ProcessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _ProcessService_Start_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Wait",
			Handler:       _ProcessService_Wait_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "KeepAlive",
			Handler:       _ProcessService_KeepAlive_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "process.proto",
}

func (m *ProcessStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dir) > 0 {
		i -= len(m.Dir)
		copy(dAtA[i:], m.Dir)
		i = encodeVarintProcess(dAtA, i, uint64(len(m.Dir)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Envs) > 0 {
		for iNdEx := len(m.Envs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Envs[iNdEx])
			copy(dAtA[i:], m.Envs[iNdEx])
			i = encodeVarintProcess(dAtA, i, uint64(len(m.Envs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Exposes) > 0 {
		for iNdEx := len(m.Exposes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Exposes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcess(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintProcess(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintProcess(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintProcess(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcess(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessWaitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessWaitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessWaitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcess(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessWaitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessWaitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessWaitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size := m.Options.Size()
			i -= size
			if _, err := m.Options.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProcessWaitResponse_StdOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessWaitResponse_StdOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StdOut != nil {
		i -= len(m.StdOut)
		copy(dAtA[i:], m.StdOut)
		i = encodeVarintProcess(dAtA, i, uint64(len(m.StdOut)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ProcessWaitResponse_StdErr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessWaitResponse_StdErr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StdErr != nil {
		i -= len(m.StdErr)
		copy(dAtA[i:], m.StdErr)
		i = encodeVarintProcess(dAtA, i, uint64(len(m.StdErr)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ProcessKeepAliveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessKeepAliveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessKeepAliveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcess(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintProcess(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProcess(dAtA []byte, offset int, v uint64) int {
	offset -= sovProcess(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProcessStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovProcess(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovProcess(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovProcess(uint64(l))
		}
	}
	if len(m.Exposes) > 0 {
		for _, e := range m.Exposes {
			l = e.Size()
			n += 1 + l + sovProcess(uint64(l))
		}
	}
	if len(m.Envs) > 0 {
		for _, s := range m.Envs {
			l = len(s)
			n += 1 + l + sovProcess(uint64(l))
		}
	}
	l = len(m.Dir)
	if l > 0 {
		n += 1 + l + sovProcess(uint64(l))
	}
	return n
}

func (m *ProcessStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovProcess(uint64(l))
	}
	return n
}

func (m *ProcessWaitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovProcess(uint64(l))
	}
	return n
}

func (m *ProcessWaitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Options != nil {
		n += m.Options.Size()
	}
	return n
}

func (m *ProcessWaitResponse_StdOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StdOut != nil {
		l = len(m.StdOut)
		n += 1 + l + sovProcess(uint64(l))
	}
	return n
}
func (m *ProcessWaitResponse_StdErr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StdErr != nil {
		l = len(m.StdErr)
		n += 1 + l + sovProcess(uint64(l))
	}
	return n
}
func (m *ProcessKeepAliveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovProcess(uint64(l))
	}
	return n
}

func (m *ProcessName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProcess(uint64(l))
	}
	return n
}

func sovProcess(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProcess(x uint64) (n int) {
	return sovProcess(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProcessStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exposes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exposes = append(m.Exposes, &Port{})
			if err := m.Exposes[len(m.Exposes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Envs = append(m.Envs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ProcessName{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessWaitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessWaitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessWaitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ProcessName{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessWaitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessWaitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessWaitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdOut", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Options = &ProcessWaitResponse_StdOut{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdErr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Options = &ProcessWaitResponse_StdErr{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessKeepAliveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessKeepAliveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessKeepAliveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ProcessName{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcess(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProcess
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProcess
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProcess
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProcess        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcess          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProcess = fmt.Errorf("proto: unexpected end of group")
)
